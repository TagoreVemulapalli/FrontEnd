{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  getUserById(userId) {\n    const url = `${this.apiUrl}/${userId}`;\n    return this.http.get(url).pipe(catchError(error => {\n      console.error('Error fetching user:', error);\n      return of(null);\n    }));\n  }\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `http://localhost:8080/api/users`;\n  }\n  getUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  getUser(id) {\n    const url = `${this.apiUrl}`;\n    return this.http.get(url);\n  }\n  fetchUserDetails(id) {\n    const url = `${this.apiUrl}`;\n    return this.http.get(url);\n  }\n  createUser(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  checkUsernameExists(userName) {\n    return this.http.get(this.apiUrl).pipe(map(users => users.some(user => user.user_name === userName)));\n  }\n  checkUserIdExists(userId) {\n    return this.http.get(`${this.apiUrl}`).pipe(map(users => users.some(user => user.user_id === userId)));\n  }\n  updateUser(userId, updatedUser) {\n    const url = `${this.apiUrl}/${userId}`;\n    return this.http.put(url, updatedUser);\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","map","catchError","UserService","getUserById","userId","url","apiUrl","http","get","pipe","error","console","constructor","getUsers","getUser","id","fetchUserDetails","createUser","user","post","checkUsernameExists","userName","users","some","user_name","checkUserIdExists","user_id","updateUser","updatedUser","put","deleteUser","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/tagore/user_management/frontend/src/app/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { User } from './models/user';\nimport { map } from 'rxjs/operators';\nimport { catchError } from 'rxjs/operators';\n\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  getUserById(userId: number): Observable<User | null> {\n    const url = `${this.apiUrl}/${userId}`;\n    return this.http.get<User>(url).pipe(\n      catchError(error => {\n        console.error('Error fetching user:', error);\n        return of(null);\n      })\n    );\n  }\n\n  private apiUrl = `http://localhost:8080/api/users`;\n\n  constructor(private http: HttpClient) {}\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.apiUrl);\n  }\n  getUser(id: number): Observable<User> {\n    const url = `${this.apiUrl}`;\n    return this.http.get<User>(url);\n  }\n\n  fetchUserDetails(id: number): Observable<User> {\n    const url = `${this.apiUrl}`;\n    return this.http.get<User>(url);\n  }\n\n  createUser(user: User): Observable<User> {\n    return this.http.post<User>(this.apiUrl, user);\n  }\n\n  checkUsernameExists(userName: string): Observable<boolean> {\n    return this.http.get<User[]>(this.apiUrl).pipe(\n      map((users: User[]) => users.some(user => user.user_name === userName))\n    );\n  }\n\n  \n  checkUserIdExists(userId: number): Observable<boolean> {\n    return this.http.get<User[]>(`${this.apiUrl}`).pipe(\n      map((users: User[]) => users.some(user => user.user_id === userId))\n    );\n  }\n\n  updateUser(userId: number, updatedUser: User): Observable<any> {\n    const url = `${this.apiUrl}/${userId}`;\n    return this.http.put(url, updatedUser);\n  }\n\n  deleteUser(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AAErC,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,UAAU,QAAQ,gBAAgB;;;AAO3C,OAAM,MAAOC,WAAW;EAEtBC,WAAWA,CAACC,MAAc;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIF,MAAM,EAAE;IACtC,OAAO,IAAI,CAACG,IAAI,CAACC,GAAG,CAAOH,GAAG,CAAC,CAACI,IAAI,CAClCR,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOX,EAAE,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,CACH;EACH;EAIAa,YAAoBL,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAD,MAAM,GAAG,iCAAiC;EAEX;EAEvCO,QAAQA,CAAA;IACN,OAAO,IAAI,CAACN,IAAI,CAACC,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC;EAC3C;EACAQ,OAAOA,CAACC,EAAU;IAChB,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;IAC5B,OAAO,IAAI,CAACC,IAAI,CAACC,GAAG,CAAOH,GAAG,CAAC;EACjC;EAEAW,gBAAgBA,CAACD,EAAU;IACzB,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;IAC5B,OAAO,IAAI,CAACC,IAAI,CAACC,GAAG,CAAOH,GAAG,CAAC;EACjC;EAEAY,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAO,IAAI,CAACb,MAAM,EAAEY,IAAI,CAAC;EAChD;EAEAE,mBAAmBA,CAACC,QAAgB;IAClC,OAAO,IAAI,CAACd,IAAI,CAACC,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CAC5CT,GAAG,CAAEsB,KAAa,IAAKA,KAAK,CAACC,IAAI,CAACL,IAAI,IAAIA,IAAI,CAACM,SAAS,KAAKH,QAAQ,CAAC,CAAC,CACxE;EACH;EAGAI,iBAAiBA,CAACrB,MAAc;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACC,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,EAAE,CAAC,CAACG,IAAI,CACjDT,GAAG,CAAEsB,KAAa,IAAKA,KAAK,CAACC,IAAI,CAACL,IAAI,IAAIA,IAAI,CAACQ,OAAO,KAAKtB,MAAM,CAAC,CAAC,CACpE;EACH;EAEAuB,UAAUA,CAACvB,MAAc,EAAEwB,WAAiB;IAC1C,MAAMvB,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIF,MAAM,EAAE;IACtC,OAAO,IAAI,CAACG,IAAI,CAACsB,GAAG,CAACxB,GAAG,EAAEuB,WAAW,CAAC;EACxC;EAEAE,UAAUA,CAACf,EAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACwB,MAAM,CAAO,GAAG,IAAI,CAACzB,MAAM,IAAIS,EAAE,EAAE,CAAC;EACvD;EAAC,QAAAiB,CAAA,G;qBArDU9B,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXnC,WAAW;IAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}